import subprocess
from typing import Optional
import pandas as pd
from rdkit import Chem
from rdkit.Chem import AllChem
from rdkit.Chem import MolToPDBBlock
import os
import traceback

def smiles_to_pdbqt(smiles: str, output_file: str) -> None:
    """
    Convert SMILES string to PDBQT format using Open Babel.

    Args:
        smiles (str): The SMILES string to convert.
        output_file (str): Path to the output PDBQT file.
    """
    mol = Chem.MolFromSmiles(smiles)
    mol = Chem.AddHs(mol)
    AllChem.EmbedMolecule(mol)

    with open(f"{output_file}.pdbqt", "w") as pdbqt_file:
        pdbqt_file.write(MolToPDBBlock(mol))

def pdbqt_to_pdb(pdbqt_file: str, output_file: str) -> None:
    """
    Convert PDBQT file to PDB format using Open Babel.

    Args:
        pdbqt_file (str): Path to the PDBQT file to convert.
        output_file (str): Path to the output PDB file.

    Returns:
        None
    """
    command = f'obabel {pdbqt_file} -O {output_file}'
    try:
        subprocess.run(command, shell=True, check=True)
        print(f"PDBQT converted to PDB and saved to {output_file}.")
    except subprocess.CalledProcessError as e:
        print(f"Error converting PDBQT to PDB: {e}")

def pdbqt_to_sdf(pdbqt_file: str, output_file: str) -> None:
    """
    Convert PDBQT file to SDF format using Open Babel.

    Args:
        pdbqt_file (str): Path to the PDBQT file to convert.
        output_file (str): Path to the output SDF file.

    Returns:
        None
    """
    command = f'obabel {pdbqt_file} -O {output_file}'
    try:
        subprocess.run(command, shell=True, check=True)
        print(f"PDBQT converted to SDF and saved to {output_file}.")
    except subprocess.CalledProcessError as e:
        print(f"Error converting PDBQT to SDF: {e}")

def pdbqt_to_smiles(pdbqt_file: str) -> str:
    """
    Convert PDBQT file to SMILES format using Open Babel.

    Args:
        pdbqt_file (str): Path to the PDBQT file to convert.

    Returns:
        str: The SMILES string.
    """
    command = f'obabel {pdbqt_file} -osmi'
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        smiles = result.stdout.strip()
        print(f"PDBQT converted to SMILES: {smiles}")
        return smiles
    except subprocess.CalledProcessError as e:
        print(f"Error converting PDBQT to SMILES: {e}")
        return ""

def perform_docking(protein_maps_file: str, ligand_file: str, output_file: Optional[str] = 'best.pdbqt', num_runs: int = 100) -> None:
    """
    Perform docking using AutoDock-GPU.

    Args:
        protein_maps_file (str): Path to the protein maps file (.fld) generated by AutoDock.
        ligand_file (str): Path to the ligand file (.pdbqt) to be docked.
        output_file (str, optional): Path to the output file where the best docked pose will be saved. Defaults to 'best.pdbqt'.
        num_runs (int, optional): Number of runs to perform in the docking simulation. Defaults to 100.

    Returns:
        None
    """
    # Construct the command for AutoDock-GPU
    command = f'adgpu --ffile {protein_maps_file} --lfile {ligand_file} --nrun {num_runs} --gbest {output_file}'
    
    try:
        # Run the command
        subprocess.run(command, shell=True, check=True)
        print(f"Docking completed successfully. Best pose saved to {output_file}.")
    except subprocess.CalledProcessError as e:
        print(f"Error during docking: {e}")

# Example usage (uncomment for testing)
# if __name__ == "__main__":
#     smiles = "CCO"
#     ligand_pdbqt_file = "ligand.pdbqt"
#     smiles_to_pdbqt(smiles, ligand_pdbqt_file)
# 
#     protein_maps_file = '/content/protein.maps.fld'
#     perform_docking(protein_maps_file, ligand_pdbqt_file)
# 
#     pdb_file = "ligand.pdb"
#     pdbqt_to_pdb(ligand_pdbqt_file, pdb_file)
# 
#     sdf_file = "ligand.sdf"
#     pdbqt_to_sdf(ligand_pdbqt_file, sdf_file)
# 
#     smiles_back = pdbqt_to_smiles(ligand_pdbqt_file)
#     print("SMILES from PDBQT:", smiles_back)
